package resizer;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.JFileChooser;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;

/**
 * @author Thomas
 */
public class Resizer extends javax.swing.JFrame {
    private static final int FRAME_WIDTH = 600;
    private static final int FRAME_HEIGHT = 500;
    private final double screenWidth;
    private final double screenHeight;
    
    private final AtomicBoolean terminate = new AtomicBoolean(true);
    
    private BufferedImage image = null;
    private Color[][] pixelsMap;
    
    private boolean vertical = false;
    private boolean horizontal = false;
    private int mouseWheelSpeed = 5;
    private int angle = 0;
    /* null
       color picker
       */
    private String currentTool = null;

    /**
     * Creates new form Resizer
     */
    public Resizer() {
        initComponents();
        itemsScroll.getVerticalScrollBar().setUnitIncrement(10);
        imageScroll.getVerticalScrollBar().setUnitIncrement(10);
//        imageLabel.setTransferHandler(new TransferHandler("icon"));
        addKeyListener();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        screenWidth = screenSize.getWidth();
        screenHeight = screenSize.getHeight();
        
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setLocationRelativeTo(null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Resizer().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rotationBGroup = new javax.swing.ButtonGroup();
        threadBGroup = new javax.swing.ButtonGroup();
        sizeGroup = new javax.swing.ButtonGroup();
        posGroup1 = new javax.swing.ButtonGroup();
        posGroup2 = new javax.swing.ButtonGroup();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        itemsScroll = new javax.swing.JScrollPane();
        itemsPanel = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        recreateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        menuMappingPanel = new javax.swing.JPanel();
        mappingLabel = new javax.swing.JLabel();
        mappingPBar = new javax.swing.JProgressBar();
        mappingPanel = new javax.swing.JPanel();
        pixelsDoneLabel = new javax.swing.JLabel();
        barLabel = new javax.swing.JLabel();
        pixelsTotLabel = new javax.swing.JLabel();
        menuDimensionPanel = new javax.swing.JPanel();
        dimensionLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        menuThreadPanel = new javax.swing.JPanel();
        threadLabel = new javax.swing.JLabel();
        rowPerThreadLabel = new javax.swing.JLabel();
        SpinnerNumberModel model = new SpinnerNumberModel(100, 50, 1000, 50);
        numThreadSpinner = new javax.swing.JSpinner(model);
        personalRButton = new javax.swing.JRadioButton();
        extremeRButton = new javax.swing.JRadioButton();
        singleRButton = new javax.swing.JRadioButton();
        menuRotationPanel = new javax.swing.JPanel();
        rotationLabel = new javax.swing.JLabel();
        noRotRButton = new javax.swing.JRadioButton();
        quarterRotRButton = new javax.swing.JRadioButton();
        halfRotRButton = new javax.swing.JRadioButton();
        quarter3RotRButton = new javax.swing.JRadioButton();
        personalRotRButton = new javax.swing.JRadioButton();
        rotationSlider = new javax.swing.JSlider();
        resizeRotCBox = new javax.swing.JCheckBox();
        menuFlipPanel = new javax.swing.JPanel();
        flipLabel = new javax.swing.JLabel();
        verticalCBox = new javax.swing.JCheckBox();
        horizontalCBox = new javax.swing.JCheckBox();
        menuRecolorPanel = new javax.swing.JPanel();
        recolorLabel = new javax.swing.JLabel();
        redPanel = new javax.swing.JPanel();
        redLabel = new javax.swing.JLabel();
        redTField = new javax.swing.JTextField();
        redSlider = new javax.swing.JSlider();
        greenPanel = new javax.swing.JPanel();
        greenLabel = new javax.swing.JLabel();
        greenTField = new javax.swing.JTextField();
        greenSlider = new javax.swing.JSlider();
        bluePanel = new javax.swing.JPanel();
        blueLabel = new javax.swing.JLabel();
        blueTField = new javax.swing.JTextField();
        blueSlider = new javax.swing.JSlider();
        alphaPanel = new javax.swing.JPanel();
        alphaLabel = new javax.swing.JLabel();
        alphaTField = new javax.swing.JTextField();
        alphaSlider = new javax.swing.JSlider();
        invertCBox = new javax.swing.JCheckBox();
        menuResizePanel = new javax.swing.JPanel();
        resizeLabel = new javax.swing.JLabel();
        widthPanel = new javax.swing.JPanel();
        widthLabel = new javax.swing.JLabel();
        widthTField = new javax.swing.JTextField();
        heightPanel = new javax.swing.JPanel();
        heightLabel = new javax.swing.JLabel();
        heightTField = new javax.swing.JTextField();
        cutRButton = new javax.swing.JRadioButton();
        resizeRButton = new javax.swing.JRadioButton();
        posPanel1 = new javax.swing.JPanel();
        rightRButton = new javax.swing.JRadioButton();
        leftRButton = new javax.swing.JRadioButton();
        posPanel2 = new javax.swing.JPanel();
        downRButton = new javax.swing.JRadioButton();
        upRButton = new javax.swing.JRadioButton();
        centerCBox = new javax.swing.JCheckBox();
        menuToolsPanel = new javax.swing.JPanel();
        threadLabel1 = new javax.swing.JLabel();
        zoomTButton = new javax.swing.JToggleButton();
        colorPickupTButton = new javax.swing.JToggleButton();
        imageContainer = new javax.swing.JPanel();
        imageScroll = new javax.swing.JScrollPane();
        imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        mousePanel = new javax.swing.JPanel();
        mousexLabel = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        mouseyLabel = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        toolLabel = new javax.swing.JLabel();
        currentToolLabel = new javax.swing.JLabel();
        toolsPanel = new javax.swing.JPanel();
        colorPanel = new javax.swing.JPanel();
        currentColorPanel = new javax.swing.JPanel();
        rLabel = new javax.swing.JLabel();
        gLabel = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        showCurColorPanel = new javax.swing.JPanel();
        curColorLabel = new javax.swing.JLabel();
        rValueLabel = new javax.swing.JLabel();
        gValueLabel = new javax.swing.JLabel();
        bValueLabel = new javax.swing.JLabel();
        currentColorPanel2 = new javax.swing.JPanel();
        rLabel2 = new javax.swing.JLabel();
        gLabel2 = new javax.swing.JLabel();
        bLabel2 = new javax.swing.JLabel();
        showCurColorPanel1 = new javax.swing.JPanel();
        curColorLabel1 = new javax.swing.JLabel();
        rValueLabel1 = new javax.swing.JLabel();
        gValueLabel1 = new javax.swing.JLabel();
        bValueLabel1 = new javax.swing.JLabel();
        zoomPanel = new javax.swing.JPanel();
        zoomTextPanel = new javax.swing.JPanel();
        zoomLabel = new javax.swing.JLabel();
        zoomTField = new javax.swing.JTextField();
        zoomPrcLabel = new javax.swing.JLabel();
        zoomSlider = new javax.swing.JSlider();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(600, 500));
        setPreferredSize(new java.awt.Dimension(600, 500));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        itemsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        itemsScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        itemsScroll.setMaximumSize(null);
        itemsScroll.setName(""); // NOI18N

        itemsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 4));
        itemsPanel.setLayout(new javax.swing.BoxLayout(itemsPanel, javax.swing.BoxLayout.Y_AXIS));

        loadButton.setBackground(new java.awt.Color(204, 204, 204));
        loadButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        loadButton.setText("LOAD IMAGE");
        loadButton.setAlignmentX(0.5F);
        loadButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        loadButton.setMaximumSize(new java.awt.Dimension(100, 30));
        loadButton.setMinimumSize(new java.awt.Dimension(100, 30));
        loadButton.setOpaque(false);
        loadButton.setPreferredSize(new java.awt.Dimension(100, 30));
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        itemsPanel.add(loadButton);

        closeButton.setBackground(new java.awt.Color(204, 204, 204));
        closeButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        closeButton.setText("CLOSE IMAGE");
        closeButton.setAlignmentX(0.5F);
        closeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        closeButton.setMaximumSize(new java.awt.Dimension(100, 30));
        closeButton.setMinimumSize(new java.awt.Dimension(100, 30));
        closeButton.setOpaque(false);
        closeButton.setPreferredSize(new java.awt.Dimension(100, 30));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        itemsPanel.add(closeButton);

        recreateButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        recreateButton.setText("RE-CREATE");
        recreateButton.setAlignmentX(0.5F);
        recreateButton.setMaximumSize(new java.awt.Dimension(100, 30));
        recreateButton.setMinimumSize(new java.awt.Dimension(100, 30));
        recreateButton.setOpaque(false);
        recreateButton.setPreferredSize(new java.awt.Dimension(100, 30));
        recreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateButtonActionPerformed(evt);
            }
        });
        itemsPanel.add(recreateButton);

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exitButton.setText("EXIT");
        exitButton.setAlignmentX(0.5F);
        exitButton.setMaximumSize(new java.awt.Dimension(100, 30));
        exitButton.setMinimumSize(new java.awt.Dimension(100, 30));
        exitButton.setOpaque(false);
        exitButton.setPreferredSize(new java.awt.Dimension(100, 30));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        itemsPanel.add(exitButton);

        menuMappingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuMappingPanel.setLayout(new javax.swing.BoxLayout(menuMappingPanel, javax.swing.BoxLayout.Y_AXIS));

        mappingLabel.setBackground(new java.awt.Color(51, 51, 51));
        mappingLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        mappingLabel.setForeground(new java.awt.Color(51, 51, 51));
        mappingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mappingLabel.setText("MAPPING IMAGE");
        mappingLabel.setAlignmentX(0.5F);
        mappingLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        mappingLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        mappingLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        mappingLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuMappingPanel.add(mappingLabel);
        mappingLabel.getAccessibleContext().setAccessibleName("MAPPING");

        mappingPBar.setMaximum(0);
        mappingPBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 4, 0, 4));
        mappingPBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mappingPBar.setMaximumSize(new java.awt.Dimension(100, 15));
        mappingPBar.setMinimumSize(new java.awt.Dimension(100, 15));
        mappingPBar.setPreferredSize(new java.awt.Dimension(100, 15));
        mappingPBar.setString("");
        mappingPBar.setStringPainted(true);
        mappingPBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mappingPBarStateChanged(evt);
            }
        });
        menuMappingPanel.add(mappingPBar);

        mappingPanel.setLayout(new javax.swing.BoxLayout(mappingPanel, javax.swing.BoxLayout.LINE_AXIS));

        pixelsDoneLabel.setBackground(new java.awt.Color(51, 51, 51));
        pixelsDoneLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        pixelsDoneLabel.setForeground(new java.awt.Color(51, 51, 51));
        pixelsDoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pixelsDoneLabel.setText("0");
        pixelsDoneLabel.setAlignmentX(0.5F);
        pixelsDoneLabel.setMaximumSize(new java.awt.Dimension(48, 30));
        pixelsDoneLabel.setMinimumSize(new java.awt.Dimension(48, 30));
        pixelsDoneLabel.setPreferredSize(new java.awt.Dimension(48, 30));
        mappingPanel.add(pixelsDoneLabel);

        barLabel.setBackground(new java.awt.Color(51, 51, 51));
        barLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        barLabel.setForeground(new java.awt.Color(51, 51, 51));
        barLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barLabel.setText("/");
        barLabel.setMaximumSize(new java.awt.Dimension(4, 30));
        barLabel.setMinimumSize(new java.awt.Dimension(4, 30));
        barLabel.setName(""); // NOI18N
        barLabel.setPreferredSize(new java.awt.Dimension(4, 30));
        mappingPanel.add(barLabel);

        pixelsTotLabel.setBackground(new java.awt.Color(51, 51, 51));
        pixelsTotLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        pixelsTotLabel.setForeground(new java.awt.Color(51, 51, 51));
        pixelsTotLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pixelsTotLabel.setText("0");
        pixelsTotLabel.setMaximumSize(new java.awt.Dimension(48, 30));
        pixelsTotLabel.setMinimumSize(new java.awt.Dimension(48, 30));
        pixelsTotLabel.setPreferredSize(new java.awt.Dimension(48, 30));
        mappingPanel.add(pixelsTotLabel);

        menuMappingPanel.add(mappingPanel);

        itemsPanel.add(menuMappingPanel);

        menuDimensionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuDimensionPanel.setLayout(new javax.swing.BoxLayout(menuDimensionPanel, javax.swing.BoxLayout.Y_AXIS));

        dimensionLabel.setBackground(new java.awt.Color(51, 51, 51));
        dimensionLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        dimensionLabel.setForeground(new java.awt.Color(51, 51, 51));
        dimensionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dimensionLabel.setText("DIMENSION");
        dimensionLabel.setAlignmentX(0.5F);
        dimensionLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        dimensionLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        dimensionLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        dimensionLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuDimensionPanel.add(dimensionLabel);

        sizeLabel.setBackground(new java.awt.Color(51, 51, 51));
        sizeLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        sizeLabel.setForeground(new java.awt.Color(51, 51, 51));
        sizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sizeLabel.setText("0 x 0 pixels");
        sizeLabel.setAlignmentX(0.5F);
        sizeLabel.setMaximumSize(new java.awt.Dimension(100, 30));
        sizeLabel.setMinimumSize(new java.awt.Dimension(100, 30));
        sizeLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        menuDimensionPanel.add(sizeLabel);

        itemsPanel.add(menuDimensionPanel);

        menuThreadPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuThreadPanel.setLayout(new javax.swing.BoxLayout(menuThreadPanel, javax.swing.BoxLayout.Y_AXIS));

        threadLabel.setBackground(new java.awt.Color(51, 51, 51));
        threadLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        threadLabel.setForeground(new java.awt.Color(51, 51, 51));
        threadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        threadLabel.setText("THREAD");
        threadLabel.setAlignmentX(0.5F);
        threadLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        threadLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        threadLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        threadLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuThreadPanel.add(threadLabel);

        rowPerThreadLabel.setBackground(new java.awt.Color(51, 51, 51));
        rowPerThreadLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rowPerThreadLabel.setForeground(new java.awt.Color(51, 51, 51));
        rowPerThreadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rowPerThreadLabel.setText("ROWS per THREAD");
        rowPerThreadLabel.setAlignmentX(0.5F);
        rowPerThreadLabel.setMaximumSize(new java.awt.Dimension(100, 20));
        rowPerThreadLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        rowPerThreadLabel.setPreferredSize(new java.awt.Dimension(100, 20));
        menuThreadPanel.add(rowPerThreadLabel);

        numThreadSpinner.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        numThreadSpinner.setMaximumSize(new java.awt.Dimension(100, 30));
        numThreadSpinner.setMinimumSize(new java.awt.Dimension(100, 30));
        numThreadSpinner.setOpaque(false);
        numThreadSpinner.setPreferredSize(new java.awt.Dimension(100, 30));
        menuThreadPanel.add(numThreadSpinner);

        threadBGroup.add(personalRButton);
        personalRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        personalRButton.setSelected(true);
        personalRButton.setText("Personalized");
        personalRButton.setAlignmentX(0.5F);
        personalRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        personalRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        personalRButton.setOpaque(false);
        personalRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        personalRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalRButtonActionPerformed(evt);
            }
        });
        menuThreadPanel.add(personalRButton);

        threadBGroup.add(extremeRButton);
        extremeRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        extremeRButton.setText("Extreme Threads");
        extremeRButton.setAlignmentX(0.5F);
        extremeRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        extremeRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        extremeRButton.setOpaque(false);
        extremeRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        extremeRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extremeRButtonActionPerformed(evt);
            }
        });
        menuThreadPanel.add(extremeRButton);

        threadBGroup.add(singleRButton);
        singleRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        singleRButton.setText("Single Thread");
        singleRButton.setAlignmentX(0.5F);
        singleRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        singleRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        singleRButton.setOpaque(false);
        singleRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        singleRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleRButtonActionPerformed(evt);
            }
        });
        menuThreadPanel.add(singleRButton);

        itemsPanel.add(menuThreadPanel);

        menuRotationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuRotationPanel.setLayout(new javax.swing.BoxLayout(menuRotationPanel, javax.swing.BoxLayout.Y_AXIS));

        rotationLabel.setBackground(new java.awt.Color(51, 51, 51));
        rotationLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        rotationLabel.setForeground(new java.awt.Color(51, 51, 51));
        rotationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rotationLabel.setText("ROTATION");
        rotationLabel.setAlignmentX(0.5F);
        rotationLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        rotationLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        rotationLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        rotationLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuRotationPanel.add(rotationLabel);

        rotationBGroup.add(noRotRButton);
        noRotRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        noRotRButton.setText("0°");
        noRotRButton.setAlignmentX(0.5F);
        noRotRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        noRotRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        noRotRButton.setOpaque(false);
        noRotRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        noRotRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noRotRButtonActionPerformed(evt);
            }
        });
        menuRotationPanel.add(noRotRButton);

        rotationBGroup.add(quarterRotRButton);
        quarterRotRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        quarterRotRButton.setText("90°");
        quarterRotRButton.setAlignmentX(0.5F);
        quarterRotRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        quarterRotRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        quarterRotRButton.setOpaque(false);
        quarterRotRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        quarterRotRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quarterRotRButtonActionPerformed(evt);
            }
        });
        menuRotationPanel.add(quarterRotRButton);

        rotationBGroup.add(halfRotRButton);
        halfRotRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        halfRotRButton.setText("180°");
        halfRotRButton.setAlignmentX(0.5F);
        halfRotRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        halfRotRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        halfRotRButton.setOpaque(false);
        halfRotRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        halfRotRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfRotRButtonActionPerformed(evt);
            }
        });
        menuRotationPanel.add(halfRotRButton);

        rotationBGroup.add(quarter3RotRButton);
        quarter3RotRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        quarter3RotRButton.setText("270°");
        quarter3RotRButton.setAlignmentX(0.5F);
        quarter3RotRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        quarter3RotRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        quarter3RotRButton.setOpaque(false);
        quarter3RotRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        quarter3RotRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quarter3RotRButtonActionPerformed(evt);
            }
        });
        menuRotationPanel.add(quarter3RotRButton);

        rotationBGroup.add(personalRotRButton);
        personalRotRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        personalRotRButton.setText("Personalized");
        personalRotRButton.setAlignmentX(0.5F);
        personalRotRButton.setEnabled(false);
        personalRotRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        personalRotRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        personalRotRButton.setOpaque(false);
        personalRotRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        menuRotationPanel.add(personalRotRButton);

        rotationSlider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rotationSlider.setMajorTickSpacing(90);
        rotationSlider.setMaximum(360);
        rotationSlider.setMinorTickSpacing(90);
        rotationSlider.setPaintLabels(true);
        rotationSlider.setValue(0);
        rotationSlider.setMaximumSize(new java.awt.Dimension(100, 35));
        rotationSlider.setMinimumSize(new java.awt.Dimension(100, 35));
        rotationSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        rotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotationSliderStateChanged(evt);
            }
        });
        menuRotationPanel.add(rotationSlider);

        resizeRotCBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resizeRotCBox.setText("Resize");
        resizeRotCBox.setAlignmentX(0.5F);
        resizeRotCBox.setMaximumSize(new java.awt.Dimension(100, 25));
        resizeRotCBox.setMinimumSize(new java.awt.Dimension(100, 25));
        resizeRotCBox.setPreferredSize(new java.awt.Dimension(100, 25));
        resizeRotCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeRotCBoxActionPerformed(evt);
            }
        });
        menuRotationPanel.add(resizeRotCBox);

        itemsPanel.add(menuRotationPanel);

        menuFlipPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuFlipPanel.setLayout(new javax.swing.BoxLayout(menuFlipPanel, javax.swing.BoxLayout.Y_AXIS));

        flipLabel.setBackground(new java.awt.Color(51, 51, 51));
        flipLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        flipLabel.setForeground(new java.awt.Color(51, 51, 51));
        flipLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        flipLabel.setText("FLIP");
        flipLabel.setAlignmentX(0.5F);
        flipLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        flipLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        flipLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        flipLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuFlipPanel.add(flipLabel);

        verticalCBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        verticalCBox.setText("Vertically");
        verticalCBox.setAlignmentX(0.5F);
        verticalCBox.setMaximumSize(new java.awt.Dimension(100, 25));
        verticalCBox.setMinimumSize(new java.awt.Dimension(100, 25));
        verticalCBox.setPreferredSize(new java.awt.Dimension(100, 25));
        verticalCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalCBoxActionPerformed(evt);
            }
        });
        menuFlipPanel.add(verticalCBox);

        horizontalCBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        horizontalCBox.setText("Horizontally");
        horizontalCBox.setAlignmentX(0.5F);
        horizontalCBox.setMaximumSize(new java.awt.Dimension(100, 25));
        horizontalCBox.setMinimumSize(new java.awt.Dimension(100, 25));
        horizontalCBox.setPreferredSize(new java.awt.Dimension(100, 25));
        horizontalCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalCBoxActionPerformed(evt);
            }
        });
        menuFlipPanel.add(horizontalCBox);

        itemsPanel.add(menuFlipPanel);

        menuRecolorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuRecolorPanel.setLayout(new javax.swing.BoxLayout(menuRecolorPanel, javax.swing.BoxLayout.Y_AXIS));

        recolorLabel.setBackground(new java.awt.Color(51, 51, 51));
        recolorLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        recolorLabel.setForeground(new java.awt.Color(51, 51, 51));
        recolorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recolorLabel.setText("COLOR");
        recolorLabel.setAlignmentX(0.5F);
        recolorLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        recolorLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        recolorLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        recolorLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuRecolorPanel.add(recolorLabel);

        redPanel.setMaximumSize(new java.awt.Dimension(100, 25));
        redPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        redPanel.setPreferredSize(new java.awt.Dimension(100, 25));
        redPanel.setLayout(new javax.swing.BoxLayout(redPanel, javax.swing.BoxLayout.LINE_AXIS));

        redLabel.setBackground(new java.awt.Color(51, 51, 51));
        redLabel.setForeground(new java.awt.Color(51, 51, 51));
        redLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        redLabel.setText("<html><font color=\"red\">RED:</font>");
        redLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        redLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        redLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        redPanel.add(redLabel);

        redTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        redTField.setText("0");
        redTField.setMaximumSize(new java.awt.Dimension(50, 25));
        redTField.setMinimumSize(new java.awt.Dimension(50, 25));
        redTField.setPreferredSize(new java.awt.Dimension(50, 25));
        redTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redTFieldKeyReleased(evt);
            }
        });
        redPanel.add(redTField);

        menuRecolorPanel.add(redPanel);

        redSlider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        redSlider.setMajorTickSpacing(255);
        redSlider.setMaximum(255);
        redSlider.setMinimum(-255);
        redSlider.setMinorTickSpacing(255);
        redSlider.setPaintLabels(true);
        redSlider.setValue(0);
        redSlider.setMaximumSize(new java.awt.Dimension(100, 35));
        redSlider.setMinimumSize(new java.awt.Dimension(100, 35));
        redSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        redSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redSliderStateChanged(evt);
            }
        });
        menuRecolorPanel.add(redSlider);

        greenPanel.setMaximumSize(new java.awt.Dimension(100, 25));
        greenPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        greenPanel.setPreferredSize(new java.awt.Dimension(100, 25));
        greenPanel.setLayout(new javax.swing.BoxLayout(greenPanel, javax.swing.BoxLayout.LINE_AXIS));

        greenLabel.setBackground(new java.awt.Color(51, 51, 51));
        greenLabel.setForeground(new java.awt.Color(51, 51, 51));
        greenLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        greenLabel.setText("<html><font color=\"green\">GREEN:</font>");
        greenLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        greenLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        greenLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        greenPanel.add(greenLabel);

        greenTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        greenTField.setText("0");
        greenTField.setMaximumSize(new java.awt.Dimension(50, 25));
        greenTField.setMinimumSize(new java.awt.Dimension(50, 25));
        greenTField.setPreferredSize(new java.awt.Dimension(50, 25));
        greenTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                greenTFieldKeyReleased(evt);
            }
        });
        greenPanel.add(greenTField);

        menuRecolorPanel.add(greenPanel);

        greenSlider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        greenSlider.setMajorTickSpacing(255);
        greenSlider.setMaximum(255);
        greenSlider.setMinimum(-255);
        greenSlider.setMinorTickSpacing(255);
        greenSlider.setPaintLabels(true);
        greenSlider.setValue(0);
        greenSlider.setMaximumSize(new java.awt.Dimension(100, 35));
        greenSlider.setMinimumSize(new java.awt.Dimension(100, 35));
        greenSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        greenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                greenSliderStateChanged(evt);
            }
        });
        menuRecolorPanel.add(greenSlider);

        bluePanel.setMaximumSize(new java.awt.Dimension(100, 25));
        bluePanel.setMinimumSize(new java.awt.Dimension(100, 25));
        bluePanel.setPreferredSize(new java.awt.Dimension(100, 25));
        bluePanel.setLayout(new javax.swing.BoxLayout(bluePanel, javax.swing.BoxLayout.LINE_AXIS));

        blueLabel.setBackground(new java.awt.Color(51, 51, 51));
        blueLabel.setForeground(new java.awt.Color(51, 51, 51));
        blueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blueLabel.setText("<html><font color=\"blue\">BLUE:</html>");
        blueLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        blueLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        blueLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        bluePanel.add(blueLabel);

        blueTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        blueTField.setText("0");
        blueTField.setMaximumSize(new java.awt.Dimension(50, 25));
        blueTField.setMinimumSize(new java.awt.Dimension(50, 25));
        blueTField.setPreferredSize(new java.awt.Dimension(50, 25));
        blueTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                blueTFieldKeyReleased(evt);
            }
        });
        bluePanel.add(blueTField);

        menuRecolorPanel.add(bluePanel);

        blueSlider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        blueSlider.setMajorTickSpacing(255);
        blueSlider.setMaximum(255);
        blueSlider.setMinimum(-255);
        blueSlider.setMinorTickSpacing(255);
        blueSlider.setPaintLabels(true);
        blueSlider.setValue(0);
        blueSlider.setMaximumSize(new java.awt.Dimension(100, 35));
        blueSlider.setMinimumSize(new java.awt.Dimension(100, 35));
        blueSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        blueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blueSliderStateChanged(evt);
            }
        });
        menuRecolorPanel.add(blueSlider);

        alphaPanel.setMaximumSize(new java.awt.Dimension(100, 25));
        alphaPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        alphaPanel.setPreferredSize(new java.awt.Dimension(100, 25));
        alphaPanel.setLayout(new javax.swing.BoxLayout(alphaPanel, javax.swing.BoxLayout.LINE_AXIS));

        alphaLabel.setBackground(new java.awt.Color(51, 51, 51));
        alphaLabel.setForeground(new java.awt.Color(51, 51, 51));
        alphaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alphaLabel.setText("<html><font color=\"yellow\">ALPHA:</html>");
        alphaLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        alphaLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        alphaLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        alphaPanel.add(alphaLabel);

        alphaTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alphaTField.setText("0");
        alphaTField.setMaximumSize(new java.awt.Dimension(50, 25));
        alphaTField.setMinimumSize(new java.awt.Dimension(50, 25));
        alphaTField.setPreferredSize(new java.awt.Dimension(50, 25));
        alphaTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                alphaTFieldKeyReleased(evt);
            }
        });
        alphaPanel.add(alphaTField);

        menuRecolorPanel.add(alphaPanel);

        alphaSlider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        alphaSlider.setMajorTickSpacing(255);
        alphaSlider.setMaximum(255);
        alphaSlider.setMinimum(-255);
        alphaSlider.setMinorTickSpacing(255);
        alphaSlider.setPaintLabels(true);
        alphaSlider.setValue(0);
        alphaSlider.setMaximumSize(new java.awt.Dimension(100, 35));
        alphaSlider.setMinimumSize(new java.awt.Dimension(100, 35));
        alphaSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        alphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSliderStateChanged(evt);
            }
        });
        menuRecolorPanel.add(alphaSlider);

        invertCBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        invertCBox.setText("Invert color");
        invertCBox.setAlignmentX(0.5F);
        invertCBox.setMaximumSize(new java.awt.Dimension(100, 25));
        invertCBox.setMinimumSize(new java.awt.Dimension(100, 25));
        invertCBox.setPreferredSize(new java.awt.Dimension(100, 25));
        invertCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertCBoxActionPerformed(evt);
            }
        });
        menuRecolorPanel.add(invertCBox);

        itemsPanel.add(menuRecolorPanel);

        menuResizePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuResizePanel.setLayout(new javax.swing.BoxLayout(menuResizePanel, javax.swing.BoxLayout.Y_AXIS));

        resizeLabel.setBackground(new java.awt.Color(51, 51, 51));
        resizeLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        resizeLabel.setForeground(new java.awt.Color(51, 51, 51));
        resizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resizeLabel.setText("SIZE");
        resizeLabel.setAlignmentX(0.5F);
        resizeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        resizeLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        resizeLabel.setMinimumSize(new java.awt.Dimension(100, 25));
        resizeLabel.setPreferredSize(new java.awt.Dimension(100, 25));
        menuResizePanel.add(resizeLabel);

        widthPanel.setLayout(new javax.swing.BoxLayout(widthPanel, javax.swing.BoxLayout.LINE_AXIS));

        widthLabel.setBackground(new java.awt.Color(51, 51, 51));
        widthLabel.setForeground(new java.awt.Color(51, 51, 51));
        widthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        widthLabel.setText("WIDTH:");
        widthLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        widthLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        widthLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        widthPanel.add(widthLabel);

        widthTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        widthTField.setText("0");
        widthTField.setMaximumSize(new java.awt.Dimension(50, 25));
        widthTField.setMinimumSize(new java.awt.Dimension(50, 25));
        widthTField.setPreferredSize(new java.awt.Dimension(50, 25));
        widthTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                widthTFieldKeyReleased(evt);
            }
        });
        widthPanel.add(widthTField);

        menuResizePanel.add(widthPanel);

        heightPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 0, 0, 0));
        heightPanel.setLayout(new javax.swing.BoxLayout(heightPanel, javax.swing.BoxLayout.LINE_AXIS));

        heightLabel.setBackground(new java.awt.Color(51, 51, 51));
        heightLabel.setForeground(new java.awt.Color(51, 51, 51));
        heightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heightLabel.setText("HEIGHT:");
        heightLabel.setMaximumSize(new java.awt.Dimension(50, 25));
        heightLabel.setMinimumSize(new java.awt.Dimension(50, 25));
        heightLabel.setPreferredSize(new java.awt.Dimension(50, 25));
        heightPanel.add(heightLabel);

        heightTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        heightTField.setText("0");
        heightTField.setMaximumSize(new java.awt.Dimension(50, 25));
        heightTField.setMinimumSize(new java.awt.Dimension(50, 25));
        heightTField.setPreferredSize(new java.awt.Dimension(50, 25));
        heightTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                heightTFieldKeyReleased(evt);
            }
        });
        heightPanel.add(heightTField);

        menuResizePanel.add(heightPanel);

        sizeGroup.add(cutRButton);
        cutRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cutRButton.setSelected(true);
        cutRButton.setText("Cut");
        cutRButton.setAlignmentX(0.5F);
        cutRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        cutRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        cutRButton.setOpaque(false);
        cutRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        cutRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutRButtonActionPerformed(evt);
            }
        });
        menuResizePanel.add(cutRButton);

        sizeGroup.add(resizeRButton);
        resizeRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resizeRButton.setText("Resize");
        resizeRButton.setAlignmentX(0.5F);
        resizeRButton.setMaximumSize(new java.awt.Dimension(100, 20));
        resizeRButton.setMinimumSize(new java.awt.Dimension(100, 20));
        resizeRButton.setOpaque(false);
        resizeRButton.setPreferredSize(new java.awt.Dimension(100, 20));
        resizeRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeRButtonActionPerformed(evt);
            }
        });
        menuResizePanel.add(resizeRButton);

        posPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        posPanel1.setLayout(new javax.swing.BoxLayout(posPanel1, javax.swing.BoxLayout.LINE_AXIS));

        posGroup1.add(rightRButton);
        rightRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rightRButton.setText("Right");
        rightRButton.setAlignmentX(0.5F);
        rightRButton.setMaximumSize(new java.awt.Dimension(50, 20));
        rightRButton.setMinimumSize(new java.awt.Dimension(50, 20));
        rightRButton.setOpaque(false);
        rightRButton.setPreferredSize(new java.awt.Dimension(50, 20));
        rightRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRButtonActionPerformed(evt);
            }
        });
        posPanel1.add(rightRButton);

        posGroup1.add(leftRButton);
        leftRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        leftRButton.setSelected(true);
        leftRButton.setText("Left");
        leftRButton.setAlignmentX(0.5F);
        leftRButton.setMaximumSize(new java.awt.Dimension(50, 20));
        leftRButton.setMinimumSize(new java.awt.Dimension(50, 20));
        leftRButton.setOpaque(false);
        leftRButton.setPreferredSize(new java.awt.Dimension(50, 20));
        leftRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRButtonActionPerformed(evt);
            }
        });
        posPanel1.add(leftRButton);

        menuResizePanel.add(posPanel1);

        posPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 0, 0));
        posPanel2.setLayout(new javax.swing.BoxLayout(posPanel2, javax.swing.BoxLayout.LINE_AXIS));

        posGroup2.add(downRButton);
        downRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        downRButton.setText("Down");
        downRButton.setAlignmentX(0.5F);
        downRButton.setMaximumSize(new java.awt.Dimension(50, 20));
        downRButton.setMinimumSize(new java.awt.Dimension(50, 20));
        downRButton.setOpaque(false);
        downRButton.setPreferredSize(new java.awt.Dimension(50, 20));
        downRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downRButtonActionPerformed(evt);
            }
        });
        posPanel2.add(downRButton);

        posGroup2.add(upRButton);
        upRButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        upRButton.setSelected(true);
        upRButton.setText("Up");
        upRButton.setAlignmentX(0.5F);
        upRButton.setMaximumSize(new java.awt.Dimension(50, 20));
        upRButton.setMinimumSize(new java.awt.Dimension(50, 20));
        upRButton.setOpaque(false);
        upRButton.setPreferredSize(new java.awt.Dimension(50, 20));
        upRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upRButtonActionPerformed(evt);
            }
        });
        posPanel2.add(upRButton);

        menuResizePanel.add(posPanel2);

        centerCBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        centerCBox.setText("Center");
        centerCBox.setAlignmentX(0.5F);
        centerCBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        centerCBox.setMaximumSize(new java.awt.Dimension(100, 25));
        centerCBox.setMinimumSize(new java.awt.Dimension(100, 25));
        centerCBox.setPreferredSize(new java.awt.Dimension(100, 25));
        centerCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerCBoxActionPerformed(evt);
            }
        });
        menuResizePanel.add(centerCBox);

        itemsPanel.add(menuResizePanel);

        menuToolsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        menuToolsPanel.setLayout(new java.awt.GridBagLayout());

        threadLabel1.setBackground(new java.awt.Color(51, 51, 51));
        threadLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        threadLabel1.setForeground(new java.awt.Color(51, 51, 51));
        threadLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        threadLabel1.setText("THREAD");
        threadLabel1.setAlignmentX(0.5F);
        threadLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        threadLabel1.setMaximumSize(new java.awt.Dimension(100, 25));
        threadLabel1.setMinimumSize(new java.awt.Dimension(100, 25));
        threadLabel1.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        menuToolsPanel.add(threadLabel1, gridBagConstraints);

        zoomTButton.setText("Z");
        zoomTButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        zoomTButton.setMaximumSize(new java.awt.Dimension(50, 50));
        zoomTButton.setMinimumSize(new java.awt.Dimension(50, 50));
        zoomTButton.setPreferredSize(new java.awt.Dimension(50, 50));
        zoomTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomTButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        menuToolsPanel.add(zoomTButton, gridBagConstraints);

        colorPickupTButton.setText("CP");
        colorPickupTButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        colorPickupTButton.setMaximumSize(new java.awt.Dimension(50, 50));
        colorPickupTButton.setMinimumSize(new java.awt.Dimension(50, 50));
        colorPickupTButton.setPreferredSize(new java.awt.Dimension(50, 50));
        colorPickupTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorPickupTButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        menuToolsPanel.add(colorPickupTButton, gridBagConstraints);

        itemsPanel.add(menuToolsPanel);

        itemsScroll.setViewportView(itemsPanel);

        getContentPane().add(itemsScroll, java.awt.BorderLayout.WEST);

        imageContainer.setOpaque(false);
        imageContainer.setLayout(new java.awt.BorderLayout());

        imageScroll.setMaximumSize(null);

        imagePanel.setBackground(new java.awt.Color(102, 102, 102));
        imagePanel.setLayout(new java.awt.GridBagLayout());

        imageLabel.setBackground(new java.awt.Color(255, 255, 255));
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imageLabel.setOpaque(true);
        imageLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                imageLabelMouseMoved(evt);
            }
        });
        imageLabel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                imageLabelMouseWheelMoved(evt);
            }
        });
        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imageLabelMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLabelMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        imagePanel.add(imageLabel, gridBagConstraints);

        imageScroll.setViewportView(imagePanel);

        imageContainer.add(imageScroll, java.awt.BorderLayout.CENTER);

        mousePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mousePanel.setMaximumSize(null);
        mousePanel.setLayout(new java.awt.GridLayout(1, 0));

        mousexLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mousexLabel.setText("mouse x > ");
        mousePanel.add(mousexLabel);

        xLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        xLabel.setText("0");
        mousePanel.add(xLabel);

        mouseyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mouseyLabel.setText("mouse y > ");
        mousePanel.add(mouseyLabel);

        yLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        yLabel.setText("0");
        mousePanel.add(yLabel);

        toolLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        toolLabel.setText("Used tool > ");
        mousePanel.add(toolLabel);

        currentToolLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        currentToolLabel.setText("null");
        mousePanel.add(currentToolLabel);

        imageContainer.add(mousePanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(imageContainer, java.awt.BorderLayout.CENTER);

        toolsPanel.setMaximumSize(null);
        toolsPanel.setPreferredSize(new java.awt.Dimension(75, 85));
        toolsPanel.setLayout(new java.awt.CardLayout());

        colorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        colorPanel.setMaximumSize(null);
        colorPanel.setLayout(new javax.swing.BoxLayout(colorPanel, javax.swing.BoxLayout.LINE_AXIS));

        currentColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        currentColorPanel.setMaximumSize(null);
        currentColorPanel.setLayout(new java.awt.GridBagLayout());

        rLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rLabel.setText("<html><font color=\"red\">RED:</font>");
        rLabel.setMaximumSize(null);
        rLabel.setMinimumSize(null);
        rLabel.setName(""); // NOI18N
        rLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(rLabel, gridBagConstraints);

        gLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel.setText("<html><font color=\"green\">GREEN:</font>");
        gLabel.setMaximumSize(null);
        gLabel.setMinimumSize(null);
        gLabel.setName(""); // NOI18N
        gLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(gLabel, gridBagConstraints);

        bLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bLabel.setText("<html><font color=\"blue\">BLUE:</font>");
        bLabel.setMaximumSize(null);
        bLabel.setMinimumSize(null);
        bLabel.setName(""); // NOI18N
        bLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(bLabel, gridBagConstraints);

        showCurColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        showCurColorPanel.setMaximumSize(new java.awt.Dimension(80, 80));
        showCurColorPanel.setMinimumSize(new java.awt.Dimension(80, 80));
        showCurColorPanel.setOpaque(false);
        showCurColorPanel.setPreferredSize(new java.awt.Dimension(80, 80));
        showCurColorPanel.setLayout(new java.awt.BorderLayout());
        showCurColorPanel.add(curColorLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(showCurColorPanel, gridBagConstraints);

        rValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rValueLabel.setText("RED");
        rValueLabel.setMaximumSize(null);
        rValueLabel.setMinimumSize(null);
        rValueLabel.setName(""); // NOI18N
        rValueLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(rValueLabel, gridBagConstraints);

        gValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gValueLabel.setText("GREEN");
        gValueLabel.setMaximumSize(null);
        gValueLabel.setMinimumSize(null);
        gValueLabel.setName(""); // NOI18N
        gValueLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(gValueLabel, gridBagConstraints);

        bValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bValueLabel.setText("BLUE");
        bValueLabel.setMaximumSize(null);
        bValueLabel.setMinimumSize(null);
        bValueLabel.setName(""); // NOI18N
        bValueLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel.add(bValueLabel, gridBagConstraints);

        colorPanel.add(currentColorPanel);

        currentColorPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        currentColorPanel2.setMaximumSize(null);
        currentColorPanel2.setLayout(new java.awt.GridBagLayout());

        rLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rLabel2.setText("<html><font color=\"red\">RED:</font>");
        rLabel2.setMaximumSize(null);
        rLabel2.setMinimumSize(null);
        rLabel2.setName(""); // NOI18N
        rLabel2.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(rLabel2, gridBagConstraints);

        gLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel2.setText("<html><font color=\"green\">GREEN:</font>");
        gLabel2.setMaximumSize(null);
        gLabel2.setMinimumSize(null);
        gLabel2.setName(""); // NOI18N
        gLabel2.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(gLabel2, gridBagConstraints);

        bLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bLabel2.setText("<html><font color=\"blue\">BLUE:</font>");
        bLabel2.setMaximumSize(null);
        bLabel2.setMinimumSize(null);
        bLabel2.setName(""); // NOI18N
        bLabel2.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(bLabel2, gridBagConstraints);

        showCurColorPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        showCurColorPanel1.setMaximumSize(new java.awt.Dimension(80, 80));
        showCurColorPanel1.setMinimumSize(new java.awt.Dimension(80, 80));
        showCurColorPanel1.setOpaque(false);
        showCurColorPanel1.setPreferredSize(new java.awt.Dimension(80, 80));
        showCurColorPanel1.setLayout(new java.awt.BorderLayout());
        showCurColorPanel1.add(curColorLabel1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(showCurColorPanel1, gridBagConstraints);

        rValueLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rValueLabel1.setText("RED");
        rValueLabel1.setMaximumSize(null);
        rValueLabel1.setMinimumSize(null);
        rValueLabel1.setName(""); // NOI18N
        rValueLabel1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(rValueLabel1, gridBagConstraints);

        gValueLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gValueLabel1.setText("GREEN");
        gValueLabel1.setMaximumSize(null);
        gValueLabel1.setMinimumSize(null);
        gValueLabel1.setName(""); // NOI18N
        gValueLabel1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(gValueLabel1, gridBagConstraints);

        bValueLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bValueLabel1.setText("BLUE");
        bValueLabel1.setMaximumSize(null);
        bValueLabel1.setMinimumSize(null);
        bValueLabel1.setName(""); // NOI18N
        bValueLabel1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        currentColorPanel2.add(bValueLabel1, gridBagConstraints);

        colorPanel.add(currentColorPanel2);

        toolsPanel.add(colorPanel, "colorCard");

        zoomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        zoomPanel.setMaximumSize(null);
        zoomPanel.setMinimumSize(null);
        zoomPanel.setPreferredSize(null);
        zoomPanel.setLayout(new javax.swing.BoxLayout(zoomPanel, javax.swing.BoxLayout.Y_AXIS));

        zoomTextPanel.setMaximumSize(null);
        zoomTextPanel.setMinimumSize(null);
        zoomTextPanel.setPreferredSize(null);

        zoomLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zoomLabel.setText("ZOOM:");
        zoomLabel.setMaximumSize(null);
        zoomLabel.setMinimumSize(null);
        zoomLabel.setPreferredSize(null);
        zoomTextPanel.add(zoomLabel);

        zoomTField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        zoomTField.setText("100");
        zoomTField.setInheritsPopupMenu(true);
        zoomTField.setMaximumSize(null);
        zoomTField.setMinimumSize(null);
        zoomTField.setPreferredSize(new java.awt.Dimension(50, 25));
        zoomTField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                zoomTFieldKeyPressed(evt);
            }
        });
        zoomTextPanel.add(zoomTField);

        zoomPrcLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zoomPrcLabel.setText("%");
        zoomTextPanel.add(zoomPrcLabel);

        zoomPanel.add(zoomTextPanel);

        zoomSlider.setMajorTickSpacing(100);
        zoomSlider.setMaximum(1000);
        zoomSlider.setMinorTickSpacing(25);
        zoomSlider.setPaintLabels(true);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setValue(100);
        zoomSlider.setMaximumSize(null);
        zoomSlider.setMinimumSize(null);
        zoomSlider.setPreferredSize(null);
        zoomSlider.setRequestFocusEnabled(false);
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });
        zoomPanel.add(zoomSlider);

        toolsPanel.add(zoomPanel, "zoomCard");

        getContentPane().add(toolsPanel, java.awt.BorderLayout.PAGE_END);
        toolsPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
//        JFileChooser chooser = new JFileChooser();
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images extension", "jpg", "gif", "png", "bmp");
//        chooser.setFileFilter(filter);
//        int returnVal = chooser.showOpenDialog(((Component)evt.getSource()).getParent());
        if (0/*returnVal*/ == JFileChooser.APPROVE_OPTION) {
//            System.out.println("You chose to open this file: "+chooser.getSelectedFile().getName());
            File file = /*chooser.getSelectedFile()*/new File("D:\\playstationrot2.gif");
            try {
                _resetParameters();
                
                terminate.set(false);
                image = (ImageIO.read(file));
                checkCenter(image);
                
                final double width = image.getWidth();
                final double height = image.getHeight();
                widthTField.setText(""+width);
                heightTField.setText(""+height);
                sizeLabel.setText(width+" x "+height+" pixels");
                pixelsTotLabel.setText(""+((int)width*height));
                mappingPBar.setMaximum((int)(width*height));
                
                /* if the jFrame is not maximized
                   it resize itself and relocate */
                if (getExtendedState() != Frame.MAXIMIZED_BOTH) {
                    if (width > screenWidth && height > screenHeight) {
                        setSize((int) screenWidth, (int) screenHeight);
                    } else if (width > screenWidth) {
                        setSize((int) screenWidth, (int)height);
                    } else if (height > screenHeight) {
                        setSize((int)width, (int) screenHeight);
                    }
                }
                repaint(); revalidate();
                
                /* range determinates how many rows a thread
                   have to read */
                final int range;
                if (extremeRButton.isSelected()) {
                    range = 1;
                } else if (singleRButton.isSelected()) {
                    range = (int) height;
                } else {
                    range = (int) numThreadSpinner.getValue();
                }
                
                /* maxThread determinates how many thread
                   have to start */
                double maxThread = height/range;
                /* remainder is the difference between
                   the maxThread and the unit of maxThread */
                double remainder = maxThread-(int)maxThread;
                if (remainder % 1 > 0.0) {
                    maxThread = (maxThread-remainder)+1;
                    System.out.println("Rounded the number of thread...");
                }
                System.out.println("Thread(s) that will start: "+(int)maxThread);
                
                for (int i = 0; i < maxThread; ++i) {
                    /* num is the current thread number */
                    final int num = i;
                    /* last check if the current thread is the last */
                    final boolean last = ((i+1) == maxThread);
                    
                    new Thread("T"+num){
                        int row = 0, col = 0;
                        
                        @Override
                        public void run() {
                            /* height determinates the number of rows
                               width determinates the number of columns */
                            pixelsMap = new Color[(int)height][(int)width];
                            
                            /* max is used to determinate the range
                               if the current thread is the last
                               it change into the difference between
                               the height and the start row number */
                            int max = range;
                            String message = ""+((num+1)*range-1);
                            if (last) {
                                System.out.println("Thread "+num+" is the last");
                                max = (int) (height-(range*num));
                                message = ""+((num*range)+max-1);
                            }
                            System.out.println("Thread number "+num+" starts. Read from row "+((num*range))+" to "+message);
                            try {
                                for (row = 0; row < max; ++row) {
                                    for (col = 0; col < width; ++col) {
                                        pixelsMap[(row+(num*range))][col] = new Color(image.getRGB(col, row));
                                        if (pixelsMap[(row+(num*range))][col] == null) {
                                            pixelsMap[(row+(num*range))][col] = Color.WHITE;
                                        }
                                        mappingPBar.setValue(mappingPBar.getValue()+1);
                                        pixelsDoneLabel.setText(""+mappingPBar.getValue());
                                        if (terminate.get()) {
                                            System.out.println("Thread number "+num+" stops.");
                                            break;
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                System.out.println("Thread number "+num+" gets an exception. Pos "+(row+(num*range)-1)+":"+(col-1));
                            } finally {
                                System.out.println("Thread number "+num+" finishes. Pos "+(row+(num*range)-1)+":"+(col-1));
                            }
                        }
                    }.start();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        terminate.set(true);
        System.out.println("You close the image\n");
        _resetParameters();
        imageLabel.setIcon(null);
        repaint(); revalidate();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void noRotRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRotRButtonActionPerformed
        _refreshAngle(0);
        
        printFinalImage();
    }//GEN-LAST:event_noRotRButtonActionPerformed

    private void quarterRotRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quarterRotRButtonActionPerformed
        _refreshAngle(90);
        
        printFinalImage();
    }//GEN-LAST:event_quarterRotRButtonActionPerformed

    private void halfRotRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfRotRButtonActionPerformed
        _refreshAngle(180);
        
        printFinalImage();
    }//GEN-LAST:event_halfRotRButtonActionPerformed

    private void quarter3RotRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quarter3RotRButtonActionPerformed
        _refreshAngle(270);
        
        printFinalImage();
    }//GEN-LAST:event_quarter3RotRButtonActionPerformed
    
    private void redSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redSliderStateChanged
        _refreshTextField(evt, redTField);
        
        printFinalImage();
    }//GEN-LAST:event_redSliderStateChanged

    private void greenSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenSliderStateChanged
        _refreshTextField(evt, greenTField);
        
        printFinalImage();
    }//GEN-LAST:event_greenSliderStateChanged

    private void blueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blueSliderStateChanged
        _refreshTextField(evt, blueTField);
        
        printFinalImage();
    }//GEN-LAST:event_blueSliderStateChanged
    
    private void redTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redTFieldKeyReleased
        _updateSlider(evt, redSlider);
    }//GEN-LAST:event_redTFieldKeyReleased

    private void greenTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_greenTFieldKeyReleased
        _updateSlider(evt, greenSlider);
    }//GEN-LAST:event_greenTFieldKeyReleased

    private void blueTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blueTFieldKeyReleased
        _updateSlider(evt, blueSlider);
    }//GEN-LAST:event_blueTFieldKeyReleased

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void mappingPBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mappingPBarStateChanged
        if (mappingPBar.getValue() >= mappingPBar.getMaximum()) {
            mappingPBar.setString("OK");
        } else {
            String s = "loading";
            switch (mappingPBar.getString()) {
                case "loading": s += '.'; break;
                case "loading.": s += '.'; break;
                case "loading..": s += '.'; break;
                case "loading...": break;
            }
            mappingPBar.setString(s);
        }
    }//GEN-LAST:event_mappingPBarStateChanged

    private void recreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateButtonActionPerformed
//        BufferedImage bf = new BufferedImage();
    }//GEN-LAST:event_recreateButtonActionPerformed

    private void alphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSliderStateChanged
        _refreshTextField(evt, alphaTField);
        
        printFinalImage();
    }//GEN-LAST:event_alphaSliderStateChanged

    private void alphaTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alphaTFieldKeyReleased
        printFinalImage();
    }//GEN-LAST:event_alphaTFieldKeyReleased

    private void extremeRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extremeRButtonActionPerformed
        numThreadSpinner.setEnabled(false);
        numThreadSpinner.setValue(1);
    }//GEN-LAST:event_extremeRButtonActionPerformed

    private void singleRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleRButtonActionPerformed
        numThreadSpinner.setEnabled(false);
    }//GEN-LAST:event_singleRButtonActionPerformed

    private void personalRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalRButtonActionPerformed
        numThreadSpinner.setEnabled(true);
        numThreadSpinner.setValue(100);
    }//GEN-LAST:event_personalRButtonActionPerformed

    private void rotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSliderStateChanged
        angle = rotationSlider.getValue();
        switch (angle) {
            case 0: noRotRButton.setSelected(true); break;
            case 90: quarterRotRButton.setSelected(true); break;
            case 180: halfRotRButton.setSelected(true); break;
            case 270: quarter3RotRButton.setSelected(true); break;
            default: personalRotRButton.setSelected(true); break;
        }
        
        printFinalImage();
    }//GEN-LAST:event_rotationSliderStateChanged

    private void verticalCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalCBoxActionPerformed
        vertical = _changeFlip(vertical);
        
        printFinalImage();
    }//GEN-LAST:event_verticalCBoxActionPerformed

    private void horizontalCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalCBoxActionPerformed
        horizontal = _changeFlip(horizontal);
        
        printFinalImage();
    }//GEN-LAST:event_horizontalCBoxActionPerformed
    
    private void invertCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertCBoxActionPerformed
        printFinalImage();
    }//GEN-LAST:event_invertCBoxActionPerformed

    private void widthTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_widthTFieldKeyReleased
        printFinalImage();
    }//GEN-LAST:event_widthTFieldKeyReleased

    private void heightTFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightTFieldKeyReleased
        printFinalImage();
    }//GEN-LAST:event_heightTFieldKeyReleased

    private void cutRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutRButtonActionPerformed
        centerCBox.setSelected(false);
        centerCBox.setEnabled(true);
        rightRButton.setEnabled(true);
        leftRButton.setEnabled(true);
        downRButton.setEnabled(true);
        upRButton.setEnabled(true);
        
        printFinalImage();
    }//GEN-LAST:event_cutRButtonActionPerformed

    private void resizeRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeRButtonActionPerformed
        centerCBox.setSelected(true);
        centerCBox.setEnabled(false);
        rightRButton.setEnabled(false);
        leftRButton.setEnabled(false);
        downRButton.setEnabled(false);
        upRButton.setEnabled(false);
        
        printFinalImage();
    }//GEN-LAST:event_resizeRButtonActionPerformed

    private void rightRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRButtonActionPerformed
        printFinalImage();
    }//GEN-LAST:event_rightRButtonActionPerformed

    private void leftRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRButtonActionPerformed
        printFinalImage();
    }//GEN-LAST:event_leftRButtonActionPerformed

    private void upRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upRButtonActionPerformed
        printFinalImage();
    }//GEN-LAST:event_upRButtonActionPerformed

    private void downRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downRButtonActionPerformed
        printFinalImage();
    }//GEN-LAST:event_downRButtonActionPerformed

    private void centerCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerCBoxActionPerformed
        JCheckBox cb = (JCheckBox) evt.getSource();
        if (cb.isSelected()) {
            rightRButton.setEnabled(false);
            leftRButton.setEnabled(false);
            downRButton.setEnabled(false);
            upRButton.setEnabled(false);
        } else {
            rightRButton.setEnabled(true);
            leftRButton.setEnabled(true);
            downRButton.setEnabled(true);
            upRButton.setEnabled(true);
        }
        
        printFinalImage();
    }//GEN-LAST:event_centerCBoxActionPerformed

    private void resizeRotCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeRotCBoxActionPerformed
        printFinalImage();
    }//GEN-LAST:event_resizeRotCBoxActionPerformed

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
        _refreshTextField(evt, zoomTField);
        
        printFinalImage();
    }//GEN-LAST:event_zoomSliderStateChanged

    private void zoomTFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zoomTFieldKeyPressed
        _updateSlider(evt, zoomSlider);
        
        printFinalImage();
    }//GEN-LAST:event_zoomTFieldKeyPressed

    private void imageLabelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_imageLabelMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0) {
            System.out.println("Mouse wheel moved UP " + -notches + " notch(es)");
            zoomSlider.setValue(zoomSlider.getValue() + mouseWheelSpeed);
        } else if (notches > 0) {
            System.out.println("Mouse wheel moved DOWN " + notches + " notch(es)");
            zoomSlider.setValue(zoomSlider.getValue() - mouseWheelSpeed);
        }
    }//GEN-LAST:event_imageLabelMouseWheelMoved

    private void imageLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMousePressed
//        JComponent c = (JComponent) evt.getSource();
//        TransferHandler th = c.getTransferHandler();
//        th.exportAsDrag(c, evt, TransferHandler.COPY);
    }//GEN-LAST:event_imageLabelMousePressed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        printFinalImage();
    }//GEN-LAST:event_formComponentResized

    private void imageLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseMoved
        xLabel.setText(""+evt.getPoint().x);
        yLabel.setText(""+evt.getPoint().y);
    }//GEN-LAST:event_imageLabelMouseMoved

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
        try {
            Robot robot = new Robot();
            Point coord = MouseInfo.getPointerInfo().getLocation();
            Color color = robot.getPixelColor(coord.x, coord.y);
            System.out.println(color);
        } catch (AWTException e) {
        }
    }//GEN-LAST:event_imageLabelMouseClicked

    private void zoomTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomTButtonActionPerformed
        _changePanel(evt, "Zoom");
    }//GEN-LAST:event_zoomTButtonActionPerformed

    private void colorPickupTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorPickupTButtonActionPerformed
        _changePanel(evt, "Color pick-up");
    }//GEN-LAST:event_colorPickupTButtonActionPerformed
    
    /**
     * 
     * @param newImage
     * @return 
     */
    private BufferedImage recolor(BufferedImage newImage) {
        if (newImage == null) {
            return null;
        }
        /* nrgb is composed of the sum between
           original value of rgb with the value
           of the color sliders */
        Color nrgb;
        BufferedImage tempImage = _newImage();
        for (int x = 0; x < newImage.getWidth(); ++x) {
            for (int y = 0; y < newImage.getHeight(); ++y) {
                int rgb = newImage.getRGB(x, y);
                int a = (rgb >> 24) & 0xFF;
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = (rgb) & 0xFF;

                r = r+redSlider.getValue();
                g = g+greenSlider.getValue();
                b = b+blueSlider.getValue();
                a = a+alphaSlider.getValue();
                if (a > 255) a = 255;
                else if (a < 0) a = 0;
                if (r > 255) r = 255;
                else if (r < 0) r = 0;
                if (g > 255) g = 255;
                else if (g < 0) g = 0;
                if (b > 255) b = 255;
                else if (b < 0) b = 0;

                nrgb = new Color(r, g, b, a);
                tempImage.setRGB(x, y, nrgb.getRGB());
            }
        }
        _printStatus("Recolor complete");
        return tempImage;
    }
    
    /**
     * 
     * @param newImage
     * @return 
     */
    private BufferedImage rotate(BufferedImage newImage) {
        if (newImage == null) {
            return null;
        }
        /* radian transform the angle from
           degree format to radian format */
        double radian = Math.toRadians(angle);
        double width = newImage.getWidth();
        double height = newImage.getHeight();
        
        AffineTransform at = new AffineTransform();
        BufferedImage tempImage;
        
        if (resizeRotCBox.isSelected()) {
            double sin = Math.abs(Math.sin(radian));
            double cos = Math.abs(Math.cos(radian));
            
            int newWidth = (int)Math.round(
                    newImage.getWidth() * cos + newImage.getHeight() * sin);
            int newHeight = (int)Math.round(
                    newImage.getWidth() * sin + newImage.getHeight() * cos);
            
            int x = (newWidth - newImage.getWidth()) / 2;
            int y = (newHeight - newImage.getHeight()) / 2;

            tempImage = _newImage(newWidth, newHeight);
            
            at.setToRotation(radian,
                    x + (newImage.getWidth() / 2),
                    y + (newImage.getHeight() / 2));
            at.translate(x, y);
            
            Graphics2D g = tempImage.createGraphics();
            g.setTransform(at);
            g.drawImage(newImage, 0, 0, null);
            g.dispose();
        } else {
            tempImage = _newImage();
            //rotate the image around its center
            at.rotate(radian, width/2, height/2);
            
            Graphics2D g = tempImage.createGraphics();
            g.transform(at);
            g.drawImage(newImage, 0, 0, null);
            g.dispose();
        }

        _printStatus("Rotation of "+angle+"° ("+radian+" rad) complete");
        return tempImage;
    }
    
    /**
     * 
     * @param newImage
     * @param cut
     * @return 
     */
    private BufferedImage resize(BufferedImage newImage) {
        if (newImage == null) {
            return null;
        }
        int newWidth = 0, newHeight = 0;
        int width = newImage.getWidth();
        int height = newImage.getHeight();
        try {
            newWidth = (int) Double.parseDouble(widthTField.getText());
            newHeight = (int) Double.parseDouble(heightTField.getText());
        } catch (Exception e) { }
        if (newWidth == width && newHeight == height) {
            return newImage;
        }
        BufferedImage tempImage = null;
        
        int minX = 0, minY = 0, maxX = newWidth, maxY = newHeight;
        if (cutRButton.isSelected()) {
            tempImage = _newImage();
            /* 
                up-left (0,0)               up-right(w-nw,0)
            
                          center((w-nw)/2,(h-nh)/2)
            
                down-left (0,h-nh)     down-right(w-nw,h-nh)
            */
            if (centerCBox.isSelected()) {
                minX = (width-maxX)/2;
                minY = (height-maxY)/2;
            } else if (upRButton.isSelected()) {
                if (leftRButton.isSelected()) {
                    //null
                } else if (rightRButton.isSelected()) {
                    minX = width-maxX;
                }
            } else if (downRButton.isSelected()) {
                if (leftRButton.isSelected()) {
                    minY = height-maxY;
                } else if (rightRButton.isSelected()) {
                    minX = width-maxX;
                    minY = height-maxY;
                }
            }
            
//            Toolkit tk = Toolkit.getDefaultToolkit();
//            CropImageFilter cif = new CropImageFilter(minX, minY, maxX, maxY);
//            Image croppedImage = tk.createImage(
//                    new FilteredImageSource(image.getSource(), cif));
            
            Graphics2D g = tempImage.createGraphics();
            g.drawImage(newImage, minX, minY, maxX+minX, maxY+minY,
                    minX, minY, maxX+minX, maxY+minY, null);
            g.dispose();
        } else if (resizeRButton.isSelected()) {
            tempImage = _newImage(newWidth, newHeight);
            Graphics2D g = tempImage.createGraphics();
            g.drawImage(newImage, 0, 0, newWidth, newHeight, null);
            g.dispose();
        }

        _printStatus("Resize complete");
        return tempImage;
    }
    
    /**
     * 
     * @param newImage
     * @return 
     */
    private BufferedImage flip(BufferedImage newImage) {
        if (newImage == null) {
            return null;
        }
        BufferedImage tempImage = _newImage();

        AffineTransform at = new AffineTransform();
        if (vertical) {
            at.concatenate(AffineTransform.getScaleInstance(1, -1));
            at.concatenate(AffineTransform.getTranslateInstance(0, -newImage.getHeight()));
        }
        if (horizontal) {
            at.concatenate(AffineTransform.getScaleInstance(-1, 1));
            at.concatenate(AffineTransform.getTranslateInstance(-newImage.getWidth(), 0));
        }

        Graphics2D g = tempImage.createGraphics();
        g.transform(at);
        g.drawImage(newImage, 0, 0, null);
        g.dispose();
        
        _printStatus("Flip complete");
        return tempImage;
    }
    
    /**
     * 
     * @param newImage
     * @return 
     */
    private BufferedImage invert(BufferedImage newImage) {
        if (newImage == null) {
            return null;
        }
        BufferedImage tempImage = _newImage();
        
//        Graphics2D g = tempImage.createGraphics();
//        g.drawImage(newImage, 0, 0, null);
//        g.dispose();
        
        LookupTable lookup = new LookupTable(0, 4) {
            @Override
            public int[] lookupPixel(int[] src, int[] dest)
            {
                dest[0] = (int)(255-src[0]);
                dest[1] = (int)(255-src[1]);
                dest[2] = (int)(255-src[2]);
                return dest;
            }
        };
        LookupOp op = new LookupOp(lookup, new RenderingHints(null));
        op.filter(tempImage, null);
        
        _printStatus("Invertion complete");
        return tempImage;
    }
    
    /**
     * 
     * @param tempImage
     * @return 
     */
    private void checkCenter(BufferedImage tempImage) {
        if (tempImage == null) {
            return;
        }
        int centerPanelWidth = imagePanel.getWidth()/2;
        int centerPanelHeight = imagePanel.getHeight()/2;
        
        int centerImageWidth = tempImage.getWidth()/2;
        int centerImageHeight = tempImage.getHeight()/2;
        
        int minX = centerPanelWidth - centerImageWidth;
        int minY = centerPanelHeight - centerImageHeight;
        
        Rectangle r = new Rectangle(minX, minY,
                centerImageWidth*2, centerImageHeight*2);
        imageLabel.setBounds(r);
        _printImage(tempImage);
    }
    
    /**
     * 
     * @param modImage
     * @return 
     */
    private BufferedImage zoom(BufferedImage modImage) {
        double zoom = zoomSlider.getValue();
        int newImageWidth = (int) (modImage.getWidth() * (zoom/100));
        int newImageHeight = (int) (modImage.getHeight() * (zoom/100));
        
        BufferedImage tempImage = _newImage(newImageWidth, newImageHeight);
        
        Graphics2D g = tempImage.createGraphics();
        g.drawImage(modImage, 0, 0, newImageWidth, newImageHeight, null);
        g.dispose();
        
        return tempImage;
    }
    
    //
    private void _printImage(BufferedImage tempImage) {
        ImageIcon ii = new ImageIcon(tempImage);
        imageLabel.setIcon(ii);
        _drawCenter(); repaint(); revalidate();
    }
    
    //
    private boolean printFinalImage() {
        BufferedImage changeImage = (resize(rotate(flip(recolor(image)))));
        if (changeImage != null) {
            BufferedImage modImage = (zoom(changeImage));
            checkCenter(modImage);
            return true;
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JPanel alphaPanel;
    private javax.swing.JSlider alphaSlider;
    private javax.swing.JTextField alphaTField;
    private javax.swing.JLabel bLabel;
    private javax.swing.JLabel bLabel2;
    private javax.swing.JLabel bValueLabel;
    private javax.swing.JLabel bValueLabel1;
    private javax.swing.JLabel barLabel;
    private javax.swing.JLabel blueLabel;
    private javax.swing.JPanel bluePanel;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JTextField blueTField;
    private javax.swing.JCheckBox centerCBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JToggleButton colorPickupTButton;
    private javax.swing.JLabel curColorLabel;
    private javax.swing.JLabel curColorLabel1;
    private javax.swing.JPanel currentColorPanel;
    private javax.swing.JPanel currentColorPanel2;
    private javax.swing.JLabel currentToolLabel;
    private javax.swing.JRadioButton cutRButton;
    private javax.swing.JLabel dimensionLabel;
    private javax.swing.JRadioButton downRButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton extremeRButton;
    private javax.swing.JLabel flipLabel;
    private javax.swing.JLabel gLabel;
    private javax.swing.JLabel gLabel2;
    private javax.swing.JLabel gValueLabel;
    private javax.swing.JLabel gValueLabel1;
    private javax.swing.JLabel greenLabel;
    private javax.swing.JPanel greenPanel;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JTextField greenTField;
    private javax.swing.JRadioButton halfRotRButton;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JPanel heightPanel;
    private javax.swing.JTextField heightTField;
    private javax.swing.JCheckBox horizontalCBox;
    private javax.swing.JPanel imageContainer;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JScrollPane imageScroll;
    private javax.swing.JCheckBox invertCBox;
    private javax.swing.JPanel itemsPanel;
    private javax.swing.JScrollPane itemsScroll;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButton leftRButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel mappingLabel;
    private javax.swing.JProgressBar mappingPBar;
    private javax.swing.JPanel mappingPanel;
    private javax.swing.JPanel menuDimensionPanel;
    private javax.swing.JPanel menuFlipPanel;
    private javax.swing.JPanel menuMappingPanel;
    private javax.swing.JPanel menuRecolorPanel;
    private javax.swing.JPanel menuResizePanel;
    private javax.swing.JPanel menuRotationPanel;
    private javax.swing.JPanel menuThreadPanel;
    private javax.swing.JPanel menuToolsPanel;
    private javax.swing.JPanel mousePanel;
    private javax.swing.JLabel mousexLabel;
    private javax.swing.JLabel mouseyLabel;
    private javax.swing.JRadioButton noRotRButton;
    private javax.swing.JSpinner numThreadSpinner;
    private javax.swing.JRadioButton personalRButton;
    private javax.swing.JRadioButton personalRotRButton;
    private javax.swing.JLabel pixelsDoneLabel;
    private javax.swing.JLabel pixelsTotLabel;
    private javax.swing.ButtonGroup posGroup1;
    private javax.swing.ButtonGroup posGroup2;
    private javax.swing.JPanel posPanel1;
    private javax.swing.JPanel posPanel2;
    private javax.swing.JRadioButton quarter3RotRButton;
    private javax.swing.JRadioButton quarterRotRButton;
    private javax.swing.JLabel rLabel;
    private javax.swing.JLabel rLabel2;
    private javax.swing.JLabel rValueLabel;
    private javax.swing.JLabel rValueLabel1;
    private javax.swing.JLabel recolorLabel;
    private javax.swing.JButton recreateButton;
    private javax.swing.JLabel redLabel;
    private javax.swing.JPanel redPanel;
    private javax.swing.JSlider redSlider;
    private javax.swing.JTextField redTField;
    private javax.swing.JLabel resizeLabel;
    private javax.swing.JRadioButton resizeRButton;
    private javax.swing.JCheckBox resizeRotCBox;
    private javax.swing.JRadioButton rightRButton;
    private javax.swing.ButtonGroup rotationBGroup;
    private javax.swing.JLabel rotationLabel;
    private javax.swing.JSlider rotationSlider;
    private javax.swing.JLabel rowPerThreadLabel;
    private javax.swing.JPanel showCurColorPanel;
    private javax.swing.JPanel showCurColorPanel1;
    private javax.swing.JRadioButton singleRButton;
    private javax.swing.ButtonGroup sizeGroup;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.ButtonGroup threadBGroup;
    private javax.swing.JLabel threadLabel;
    private javax.swing.JLabel threadLabel1;
    private javax.swing.JLabel toolLabel;
    private javax.swing.JPanel toolsPanel;
    private javax.swing.JRadioButton upRButton;
    private javax.swing.JCheckBox verticalCBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JPanel widthPanel;
    private javax.swing.JTextField widthTField;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JLabel zoomLabel;
    private javax.swing.JPanel zoomPanel;
    private javax.swing.JLabel zoomPrcLabel;
    private javax.swing.JSlider zoomSlider;
    private javax.swing.JToggleButton zoomTButton;
    private javax.swing.JTextField zoomTField;
    private javax.swing.JPanel zoomTextPanel;
    // End of variables declaration//GEN-END:variables

    //
    private void _printStatus(String message) {
        System.out.println(message);
    }
    
    //
    private void _updateSlider(KeyEvent evt, JSlider s) {
        JTextField tf = (JTextField)evt.getSource();
        int range = Integer.parseInt(tf.getText());
        s.setValue(range);
    }
    
    //
    private void _refreshTextField(ChangeEvent evt, JTextField tf) {
        JSlider s = (JSlider) evt.getSource();
        tf.setText(""+s.getValue());
    }
    
    //
    private void _changePanel(ActionEvent evt, String tool) {
        JToggleButton tb = (JToggleButton) evt.getSource();
        Container cc = tb.getParent();
        for (Component c : cc.getComponents()) {
            if (c instanceof JToggleButton) {
                JToggleButton tb1 = (JToggleButton) c;
                if (!tb1.equals(tb)) {
                    tb1.setSelected(false);
                }
            }
        }
        if (tb.isSelected()) {
            currentTool = tool;
        } else {
            currentTool = "null";
        }
        currentToolLabel.setText(currentTool);
    }
    
    //
    private void _refreshAngle(int angle) {
        this.angle = angle;
        rotationSlider.setValue(angle);
    }
    
    //
    private boolean _changeFlip(boolean flip) {
        return !flip;
    }
    
    //
    private BufferedImage _newImage() {
        return new BufferedImage(
                image.getWidth(), image.getHeight(),
                BufferedImage.TYPE_INT_ARGB);
    }
    
    //
    private BufferedImage _newImage(int width, int height) {
        if (width == 0) width = 1;
        if (height == 0) height = 1;
        return new BufferedImage(width, height,
                BufferedImage.TYPE_INT_ARGB);
    }
    
    private void _drawCenter() {
        int centerPanelWidth = imagePanel.getWidth()/2;
        int centerPanelHeight = imagePanel.getHeight()/2;
        
        Graphics2D g = (Graphics2D) imagePanel.getGraphics();
        g.drawLine(centerPanelWidth-10, centerPanelHeight, centerPanelWidth+10, centerPanelHeight);
        g.drawLine(centerPanelWidth, centerPanelHeight-10, centerPanelWidth, centerPanelHeight+10);
        g.dispose();
    }
    
    //
    private void _resetParameters() {
        zoomSlider.setValue(100);
        mappingPBar.setValue(0);
        mappingPBar.setMaximum(0);
        mappingPBar.setString("");
        pixelsDoneLabel.setText("0");
        pixelsTotLabel.setText("0");
        sizeLabel.setText("0 x 0 pixels");
        noRotRButton.setSelected(true);
        verticalCBox.setSelected(false);
        horizontalCBox.setSelected(false);
        redSlider.setValue(0);
        greenSlider.setValue(0);
        blueSlider.setValue(0);
        alphaSlider.setValue(0);
        widthTField.setText("0");
        heightTField.setText("0");
        image = null;
    }
    
    private void addKeyListener() {
        this.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                //don't use it
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                switch (ke.getKeyCode()) {
                    case KeyEvent.VK_R:
                        imageLabel.setOpaque(true);
                        revalidate(); repaint();
                        break;
                    case KeyEvent.VK_C:
                        _drawCenter();
                    default: break;
                }
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                switch (ke.getKeyCode()) {
                    case KeyEvent.VK_R:
                        imageLabel.setOpaque(false);
                        revalidate(); repaint();
                        break;
                    default: break;
                }
            }
        });
    }
}